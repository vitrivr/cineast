plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'de.undercouch.download' version "5.0.5"
    id 'com.google.osdetector' version '1.7.0'
    id 'java-library'
    id 'idea'
}

allprojects {
    /* Group name of our artifacts */
    group = 'org.vitrivr'

    /* Our current version, on dev branch this should always be release+1-SNAPSHOT */
    version = '3.11.6'

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
}

subprojects {
    buildscript {
        repositories {
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2"
            }
        }

        dependencies {
            classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.18"
        }
    }

    apply plugin: 'com.github.johnrengelman.shadow'

    shadowJar {
        zip64 true // Required to allow more than 65535 entries in final archive
    }

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    /* Important warnings that are currently missing simply because there are too many: "cast", "rawtypes". Ideally, "all" should be used in the future. */
    def enabledWarnings = ["-Xlint:deprecation", "-Xlint:empty", "-Xlint:overrides", "-Xlint:serial", "-Xlint:static", "-Xlint:unchecked", "-Xlint:varargs"]
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs += enabledWarnings
    }
    compileTestJava.options.compilerArgs += enabledWarnings

    dependencies {
        /** Log4j 2 */
        implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: version_log4j2
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: version_log4j2
        implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: version_log4j2

        /** Jackson (JSON conversion) */
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: version_jackson
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: version_jackson

        /** Protobuf */
        implementation group: 'io.grpc', name: 'grpc-stub', version: '1.45.1'
        implementation group: 'io.grpc', name: 'grpc-netty', version: '1.45.1'

        /** Test dependencies (JUnit 5) */
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: version_junit
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: version_junit
        testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: version_junit_platform
    }
}

idea {
    module {
        downloadJavadoc = true

        excludeDirs += file('data')
        excludeDirs += file('thumbnails')
        excludeDirs += file('output')
        excludeDirs += file('logs')
        excludeDirs += file('resources')
    }
}

task getExternalFiles {
    doLast {
        def fileList = rootProject.file("externalFiles.csv")
        fileList.eachLine { String line ->
            def split = line.split(",")
            def destination = split[1]
            download.run {
                src split[0]
                dest destination
            }
            if (destination.endsWith(".tar.gz")) {
                def compressed = file(destination)
                def target = file(destination.substring(0, destination.length() - 7))

                copy {
                    from tarTree(compressed)
                    into target
                }
                delete(compressed)
            }
            return
        }
    }
}

task generateOpenApiSpecs(type: JavaExec) {
    classpath = project(":cineast-api").sourceSets.main.runtimeClasspath
    mainClass.set('org.vitrivr.cineast.api.docs.GenerateOpenApiSpecs')

    def config = project.hasProperty("cineastConfig") ? project.getProperty("cineastConfig") : "cineast.json"

    args("${config}")
}

task generateOAS(type: Download) {
    /* This requires a locally running Cineast */
    src 'http://localhost:4567/openapi-specs'
    dest "${project.projectDir}/docs/openapi.json"
}
