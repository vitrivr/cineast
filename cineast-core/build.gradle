import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.gradle.internal.os.OperatingSystem

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
        mavenContent {
            snapshotsOnly()
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.vitrivr'
            artifactId = 'cineast-core'
            version = System.getenv().getOrDefault("MAVEN_PUBLICATION_VERSION", version.toString())
            pom {
                name = 'Cineast (Driver)'
                description = 'The core library for Cineast.'
                url = 'https://github.com/vitrivr/cineast/'
                licenses {
                    license {
                        name = 'MIT License'
                    }
                }
                developers {
                    developer {
                        id = 'lucaro'
                        name = 'Luca Rossetto'
                        email = 'rossetto@ifi.uzh.ch'
                    }
                    developer {
                        id = 'silvanheller'
                        name = 'Silvan Heller'
                        email = 'silvan.heller@unibas.ch'
                    }
                    developer {
                        id = 'sauterl'
                        name = 'Loris Sauter'
                        email = 'loris.sauter@unibas.ch'
                    }
                    developer {
                        id = 'ppanopticon'
                        name = 'Ralph Gasser'
                        email = 'ralph.gasser@unibas.ch'
                    }
                    developer {
                        id = 'spiess'
                        name = 'Florian Spiess'
                        email = 'florian.spiess@unibas.ch'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/vitrivr/cineast.git'
                    url = 'https://github.com/vitrivr/cineast/'
                }
            }
            from components.java
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            name = "OSSRH"
            url = (publishing.publications.mavenJava.version.endsWith('SNAPSHOT')) ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

project.ext.lwjglVersion = "3.3.3"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}


dependencies {

    /** THE Cottontail DB proto dependency */
    api group: 'org.vitrivr', name: 'cottontaildb-proto', version: version_cottontaildb_proto
    api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: version_kotlin_stdlib

    /** THE Polypheny dependency */
    //api group: "org.polypheny", name: "polypheny-jdbc-driver", version: version_polypheny

    /* Google Json: GSON, since JSON db layer is based on this */
    api group: 'com.google.code.gson', name: 'gson', version: version_gson

    /** Some basic stuff (collections etc). */
    api group: "com.google.guava", name: "guava", version: version_guava
    api group: "com.googlecode.javaewah", name: "JavaEWAH", version: version_javaewah
    api group: 'com.carrotsearch', name: 'hppc', version: vershion_hppc

    /** Mockito for unit testing */
    implementation 'org.mockito:mockito-inline:4.6.1'

    /** Tensorflow (Java). */
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX())
        api group: "org.tensorflow", name: "tensorflow-core-platform", version: version_tensorflow
    else
        api group: "org.tensorflow", name: "tensorflow-core-platform-gpu", version: version_tensorflow


    /** Apache Commons Libraries */
    api group: "org.apache.commons", name: "commons-lang3", version: version_commonslang3
    api group: "org.apache.commons", name: "commons-math3", version: version_commonsmath3
    api group: "org.apache.commons", name: "commons-text", version: version_commonstext
    api group: "commons-io", name: "commons-io", version: version_commonsio
    api group: "commons-codec", name: "commons-codec", version: version_commonscodec

    /** ImageIO and computer graphics libraries. */
    api group: "com.twelvemonkeys.imageio", name: "imageio-jpeg", version: version_twelvemonkeys
    api group: "com.twelvemonkeys.imageio", name: "imageio-tiff", version: version_twelvemonkeys
    api group: "com.drewnoakes", name: "metadata-extractor", version: version_metadataextractor
    api group: "org.boofcv", name: "boofcv-all", version: version_boofcv
    api group: "net.coobird", name: "thumbnailator", version: version_thumbnailator

    /** JOGL and JOML dependencies for 3D model support. */
    api "org.joml:joml:${version_joml}"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}"
    api "org.jogamp.jogl:jogl-all:${version_jogl}"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-windows-amd64"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-windows-i586"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-amd64"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-armv6"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-armv6hf"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-i586"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-macosx-universal"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-windows-amd64"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-windows-i586"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-amd64"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-armv6"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-armv6hf"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-i586"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-macosx-universal"

    /** JavaCPP. */
    api group: "org.bytedeco", name: "javacpp", version: version_javacpp
    api group: "org.bytedeco", name: "ffmpeg-platform", version: version_ffmpeg

    /** OpenCV. */
    api group: 'org.openpnp', name: 'opencv', version: version_opencv

    /** Java 9+ compatibility. */
    api group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    api group: 'javax.activation', name: 'activation', version: '1.1.1'


    /** LWJGL. Minimal OpenGl Configuration from customizer https://www.lwjgl.org/customize **/
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-bgfx"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nanovg"
    implementation "org.lwjgl:lwjgl-nuklear"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-par"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64") runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"
}

shadowJar {
    mergeServiceFiles()
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}
